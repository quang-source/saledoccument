@model SalesContractApplication.Models.SalesDocumentViewModel

@{
    ViewBag.Title = $"{(ViewBag.IsEdit ? "Edit" : "Create")} Sales Document";
    var errors = ViewBag.Errors as List<Microsoft.AspNetCore.Mvc.ModelBinding.ModelError>;
    var postErrors = ViewBag.PostErrors as List<string>;
    var str = "";
}
@if (!ViewData.ModelState.IsValid)
{
    foreach (var err in errors)
    {
        str += err.ErrorMessage;
    }
    str = $@"showToast('warning', '{Html.Encode(str)}');";

    <script type="text/javascript">
        $(document).ready(function () {
            @Html.Raw(str)
        });
    </script>
}

@if (postErrors != null && postErrors.Count > 0)
{
    foreach (var err in postErrors)
    {
        str += err;
    }
    str = $@"showToast('warning', '{Html.Encode(str)}');";

    <script type="text/javascript">
        $(document).ready(function () {
            @Html.Raw(str)
        });
    </script>
}

@if (TempData["Success"] != null)
{
    str = TempData["Success"]?.ToString();
    str = $@"showToast('success', '{@Html.Encode(str)}');";

    <script type="text/javascript">
        $(document).ready(function () {
            @Html.Raw(str)
        });
    </script>
}
<div class="card card-timeline px-2 py-2 border-none">
    @* <h2>@ViewBag.Title</h2> *@
    @{
        if (ViewBag.isEdit)
        {
            <ul class="order-tracking">
                <li class="step cancel first-active">
                    <div class="allowed" data-status="00"><i class="fas fa-times"></i></div> Cancel
                </li>
                <li class="step ">
                    <div class="allowed" data-status="10"><i class="fas fa-file-alt"></i></div>Quoted
                </li>
                <li class="step ">
                    <div class="allowed" data-status="20"><i class="fas fa-paper-plane"></i></div> Quote sent
                </li>
                <li class="step ">
                    <div class="allowed" data-status="30"><i class="fas fa-check-circle"></i></div>Quote Approved
                </li>
                <li class="step ">
                    <div class="allowed" data-status="40"><i class="fas fa-envelope-open-text"></i></div>PO Sent
                </li>
                <li class="step ">
                    <div class="not-allowed" data-status="50"><i class="fas fa-clipboard-check"></i></div>SO Checked
                </li>
                <li class="step ">
                    <div class="not-allowed" data-status="60"><i class="fas fa-plus-circle"></i></div>MO created
                </li>
                <li class="step ">
                    <div class="not-allowed" data-status="70"><i class="fas fa-rocket"></i></div>MO launched
                </li>
                <li class="step">
                    <div class="not-allowed" data-status="80"><i class="fas fa-file-invoice-dollar"></i></div>Partial - Invoiced
                </li>
                <li class="step ">
                    <div class="not-allowed" data-status="85"><i class="fas fa-receipt"></i></div> Invoiced
                </li>
                <li class="step ">
                    <div class="not-allowed" data-status="90"><i class="fas fa-truck-loading"></i></div> Partial - Shipped
                </li>
                <li class="step ">
                    <div class="not-allowed" data-status="100"><i class="fas fa-shipping-fast"></i></div> Shipped
                </li>
            </ul>
        }
    }

    @using (Html.BeginForm(((ViewBag.Duplicating ?? false) ? "Duplicate" : "CreateEdit"), "SalesDocument", FormMethod.Post, new { @class = "form-horizontal", role = "form", id = "myForm" }))
    {
        @Html.AntiForgeryToken()
        <!-- Sales Document Fields -->
        <div class="form-group  " style="margin-bottom:12px!important;">
            <div class="row">
                <div class="col-md-4 offset-2">
                    <div class="form-group">
                        @Html.LabelFor(m => m.SalesDocument.CustomerId, new { @class = "col-form-label" })<span class="text-danger"> *</span>
                        <div class="">
                            <select class="single-select form-control" data-val="true" data-val-number="The field CustomerId must be a number." data-val-required="Customer ID is required."
                                    id="customer-select" name="" @(ViewBag.IsEdit ? "disabled" : "")>

                                <option value="">Select Customer</option>
                                @foreach (var opt in Model.Customers)
                                {
                                    var option = $"<option value='{opt.Value}' {((opt.Value.ToString().Equals(Model.SalesDocument?.CustomerId?.ToString("F2"))) ? "selected" : "")}>{opt.Text}</option>";
                                    @Html.Raw(option)
                                }
                            </select>
                            <input type="hidden" name="SalesDocument.CustomerId" id="customer-id-hidden" value="@Model.SalesDocument.CustomerId" />
                            @Html.ValidationMessageFor(m => m.SalesDocument.CustomerId, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    <div class="form-group">
                        <div class="">
                            <select id="division-select" class="form-control" disabled hidden>
                                <option value="">Select Customer</option>
                                @foreach (var division in Model.Divisions)
                                {
                                    <option value="@division.Value" data-customer-id="@division.Text">@division.Value</option>
                                }
                            </select>
                            @Html.HiddenFor(m => m.SalesDocument.Division, new { @id = "division-code-hidden" })
                        </div>
                    </div>
                    <div class="form-group row">
                        <div class="col-md-6">
                            @Html.LabelFor(m => m.SalesDocument.GoldPrice, new { @class = "col-form-label" })
                            <div class="">
                                @Html.TextBoxFor(m => m.SalesDocument.GoldPrice, new { @class = "form-control", type = "number", min = "0", step = "0.01" })
                                @Html.ValidationMessageFor(m => m.SalesDocument.GoldPrice, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <div class="col-md-6">
                            @Html.LabelFor(m => m.SalesDocument.SilverPrice, new { @class = "col-form-label" })
                            <div class="">
                                @Html.TextBoxFor(m => m.SalesDocument.SilverPrice, new { @class = "form-control", type = "number", min = "0", step = "0.01" })
                                @Html.ValidationMessageFor(m => m.SalesDocument.SilverPrice, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>
                </div>
                <div class="col-md-4">
                    <div class="form-group">
                        @Html.LabelFor(m => m.SalesDocument.PurchaseOrderNumber, new { @class = "col-form-label" })
                        <div class="">
                            @Html.TextBoxFor(m => m.SalesDocument.PurchaseOrderNumber, new { @class = "form-control" })
                            @Html.ValidationMessageFor(m => m.SalesDocument.PurchaseOrderNumber, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    <div class="form-group row">
                        <div class="col-md-6">
                            <label for="SalesDocument_DocumentValidStart" class="col-form-label">Contract Valid From<span class="text-danger"> *</span></label>
                            <div class="">
                                @Html.TextBoxFor(m => m.SalesDocument.DocumentValidStart, "{0:yyyy-MM-dd}", new { @class = "form-control", type = "date" })
                            </div>
                        </div>
                        <div class="col-md-6">
                            <label for="SalesDocument_DocumentValidEnd" class="col-form-label">To<span class="text-danger"> *</span></label>
                            <div class="">
                                @Html.TextBoxFor(m => m.SalesDocument.DocumentValidEnd, "{0:yyyy-MM-dd}", new { @class = "form-control", type = "date" })
                            </div>
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(m => m.SalesDocument.ExpectedInvoiceDate, new { @class = "col-form-label" })<span class="text-danger"> *</span>
                        <div class="">
                            @Html.TextBoxFor(m => m.SalesDocument.ExpectedInvoiceDate, "{0:yyyy-MM-dd}", new { @class = "form-control", type = "date" })
                        </div>
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-md-8  offset-2">
                    <div class="form-group">
                        <label for="exampleFormControlInput1">Note</label>
                        <textarea class="form-control" id="textAreaExample2" rows="3"></textarea>
                    </div>
                </div>
            </div>
        </div>

        <!-- Nav tabs -->
        <ul class="nav nav-tabs" id="myTab" role="tablist">
            <li class="nav-item" role="presentation">
                <button class="nav-link active" id="home-tab" data-bs-toggle="tab" data-bs-target="#home" type="button" role="tab" aria-controls="home" aria-selected="true">Sales Document Lines</button>
            </li>
            <li class="nav-item" role="presentation">
                <button class="nav-link" id="profile-tab" data-bs-toggle="tab" data-bs-target="#profile" type="button" role="tab" aria-controls="profile" aria-selected="false">Other Info</button>
            </li>
        </ul>
        <!-- Tab content -->
        <div class="tab-content border p-2" id="myTabContent">
            <div class="tab-pane fade show active" id="home" role="tabpanel" aria-labelledby="home-tab">
                <!-- Excel file upload input -->
                <div class="form-group">
                    <div class="col-md-4">
                        <div class="form-group">
                            <div class="">
                                <input type="file" id="excel_file" name="excel_file" class="form-control" accept=".xls,.xlsx" hidden />
                            </div>
                            <button type="button" id="add_line" class="btn btn-primary" data-toggle="tooltip" data-placement="top" title="Add sales document line"><i class="fa fa-plus"></i></button>
                            <button type="button" id="import_file" class="btn btn-success" data-toggle="tooltip" data-placement="top" title="Import Excel file"><i class="fa fa-file-import"></i></button>
                        </div>
                    </div>
                </div>

                <!-- Load the Sales Document Lines partial view -->
                <div id="table-lines-container">
                    @await Html.PartialAsync("_partial/sales_document_lines_table", Model)
                </div>
                <!-- Sales Document Lines -->
              
            </div>
            <div class="tab-pane fade" id="profile" role="tabpanel" aria-labelledby="profile-tab">
                <div class="row">
                    <div class="col-md-4">
                        <div class="form-group">
                            @Html.LabelFor(m => m.SalesDocument.MetalPricingMethod, new { @class = "col-form-label" })
                            <div class="">
                                @Html.DropDownListFor(m => m.SalesDocument.MetalPricingMethod, Model.MetalPricingMethods, new { @class = "form-control" })
                            </div>
                        </div>
                        <div class="form-group row">
                            <div class="col-md-6">
                                @Html.LabelFor(m => m.SalesDocument.Margin, new { @class = "col-form-label" })
                                <div class="">
                                    @Html.TextBoxFor(m => m.SalesDocument.Margin, new { @class = "form-control", type = "number", min = "0", step = "0.01" })
                                    @Html.ValidationMessageFor(m => m.SalesDocument.Margin, "", new { @class = "text-danger" })
                                </div>
                            </div>
                            <div class="col-md-6">
                                @Html.LabelFor(m => m.SalesDocument.Discount, new { @class = "col-form-label" })
                                <div class="">
                                    @Html.TextBoxFor(m => m.SalesDocument.Discount, new { @class = "form-control", type = "number", min = "0", step = "0.01" })
                                    @Html.ValidationMessageFor(m => m.SalesDocument.Discount, "", new { @class = "text-danger" })
                                </div>
                            </div>
                        </div>
                        <div class="form-group row">
                            <div class="col-md-6">
                                @Html.LabelFor(m => m.SalesDocument.Currency, new { @class = "col-form-label" })
                                <div class="">
                                    @Html.DropDownListFor(m => m.SalesDocument.Currency, Model.Currencies, new { @class = "form-control", @id = "header-currency" })
                                    @Html.ValidationMessageFor(m => m.SalesDocument.Currency, "", new { @class = "text-danger" })
                                </div>
                            </div>

                            <div class="col-md-6">
                                @Html.LabelFor(m => m.SalesDocument.ExchangeRate, new { @class = "col-form-label" })
                                <div class="">
                                    @Html.TextBoxFor(m => m.SalesDocument.ExchangeRate, new { @class = "form-control", @id = "exchange-rate", type = "number", min = "0", step = "0.01" })
                                    @Html.ValidationMessageFor(m => m.SalesDocument.ExchangeRate, "", new { @class = "text-danger" })
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-4">
                        <div class="form-group">
                            @Html.LabelFor(m => m.SalesDocument.PartialShipmentLevel, new { @class = "col-form-label" })
                            <div class="">
                                @Html.DropDownListFor(m => m.SalesDocument.PartialShipmentLevel, Model.PartialShipmentLevels, new { @class = "form-control" })
                            </div>
                        </div>
                    </div>
                    <div class="col-md-4">
                        <div class="form-group">
                            @Html.LabelFor(m => m.SalesDocument.LabelOrderStatus, new { @class = "col-form-label" })
                            <div class="">
                                @Html.DropDownListFor(m => m.SalesDocument.LabelOrderStatus, Model.LabelOrderStatuses, new { @class = "form-control" })
                            </div>
                        </div>
                    </div>
                </div>

            </div>

        </div>
        <div class="form-group mt-4">
            <div class="col-md-offset-10 col-md-2">
                <input type="submit" value="Submit Document" class="btn btn-primary btn-lg" />
            </div>
        </div>
    }

</div>

@section Scripts {
    <script type="text/javascript">
        function TotalFormatter(data, footerValue) {
            var field = this.field; // Get the field we are summing
            var total = data.reduce(function (sum, row) {
                return sum + (parseInt($(row[field]).val()));
            }, 0);
            return total; // Return the total sum
        }
        this.runningFormatter = function (value, row, index) {
            $table = $('#lines-table');
            var tableOptions = $table.bootstrapTable('getOptions');
            rowIndex = ((tableOptions.pageNumber - 1) * tableOptions.pageSize) + (1 + index);
            row.row_index = rowIndex;
            return rowIndex;
        };
        function disableEditingLines() {
            $('#add_line').prop('disabled', true);
            $('#import_file').prop('disabled', true);
            $("#lines-table tbody tr").not('.no-records-found').each(function (index, obj) {
                $(obj).find('.remove').addClass('disabled').off('click');

                $(obj).find('input').prop('readonly', true);

                $(obj).find('select option').not(':selected').remove();

            });
        }
        $(document).ready(function () {
            $("#myForm").submit(function (e) {
                var checkResult = true;
                if ($('#lines-table tbody tr').not('.no-records-found').length == 0) {
                    showToast('warning', 'Sale document line is empty');
                    // return false;
                    checkResult = false;
                }
                $("#lines-table tbody tr").not('.no-records-found').each(function (index, obj) {
                    var isEmpty = true;


                    var CustomerReference_obj = $(obj).find('input[name*="CustomerReference"]');
                    var CustomerReference = CustomerReference_obj.val();
                    if (CustomerReference == "") {
                        showToast('warning', "CustomerReference  is empty");
                        $(CustomerReference_obj).removeClass('valid').addClass('invalid');
                        checkResult = false;
                    } else {
                        $(CustomerReference_obj).removeClass('invalid').addClass('valid');
                    }


                    var productID_obj = $(obj).find('input[name*="ProductIDSize"]');
                    var productID = productID_obj.val();

                    if (productID == "") {
                        showToast('warning', "ProductID  is empty");
                        checkResult = false;
                        $(productID_obj).removeClass('valid').addClass('invalid');
                    } else {
                        var regex = /^[1-9]\d{6}(-[1-9]\d)?$/;

                        if (regex.test(productID)) {
                            $(productID_obj).removeClass('invalid').addClass('valid');
                        } else {
                            $(productID_obj).removeClass('valid').addClass('invalid');
                            showToast('warning', "Invalid  ProductID ");
                            checkResult = false;
                        }
                    }


                    var LOP_obj = $(obj).find('input[name*="LOP"]');
                    var LOP = LOP_obj.val();
                    if (LOP == "") {
                        showToast('warning', "Material  is empty");
                        $(LOP_obj).removeClass('valid').addClass('invalid');
                        checkResult = false;
                    } else {
                        var validItems = [
                            'AU750', 'AU375', 'AG925', 'BRS', 'PLQ',
                            'AU585', 'AU416', 'AU800',
                            'AU250', 'AU333', 'AG170'
                        ];
                        if (!validItems.includes(LOP.toUpperCase())) {
                            showToast('warning', "Invalid material ");
                            $(LOP_obj).removeClass('valid').addClass('invalid');
                        } else {
                            $(LOP_obj).removeClass('invalid').addClass('valid');
                        }

                    }

                    var Qty_obj = $(obj).find('input[name*="Quantity"]');
                    var Qty = Qty_obj.val();
                    if (Qty == "") {
                        showToast('warning', "Quantity  is empty");
                        $(Qty_obj).removeClass('valid').addClass('invalid');
                        checkResult = false;
                    } else {
                        $(Qty_obj).removeClass('invalid').addClass('valid');
                    }


                    var UnitPrice_obj = $(obj).find('input[name*="UnitPrice"]');
                    var UnitPrice = UnitPrice_obj.val();
                    if (UnitPrice == "") {
                        showToast('warning', "UnitPrice  is empty");
                        $(UnitPrice_obj).removeClass('valid').addClass('invalid');
                        checkResult = false;
                    } else {
                        $(UnitPrice_obj).removeClass('invalid').addClass('valid');
                    }

                    var InvoiceToAddress_obj = $(obj).find('select[name*="InvoiceToAddress"]');
                    var InvoiceToAddress = InvoiceToAddress_obj.val();
                    if (InvoiceToAddress == "") {
                        showToast('warning', "UnitPrice  is empty");
                        $(InvoiceToAddress_obj).removeClass('valid').addClass('invalid');
                        checkResult = false;
                    } else {
                        $(InvoiceToAddress_obj).removeClass('invalid').addClass('valid');
                    }

                    var ShipToAddress_obj = $(obj).find('select[name*="ShipToAddress"]');
                    var ShipToAddress = ShipToAddress_obj.val();
                    if (ShipToAddress == "") {
                        showToast('warning', "UnitPrice  is empty");
                        $(ShipToAddress_obj).removeClass('valid').addClass('invalid');
                        checkResult = false;
                    } else {
                        $(ShipToAddress_obj).removeClass('invalid').addClass('valid');
                    }
                });
                return checkResult;
            });


            var currentStatus = parseInt('@Model.SalesDocument.Status')
            $(".order-tracking li").each(function (index, obj) {
                var status = parseInt($(this).find('div').data('status'))
                if (status <= currentStatus) {
                    $(this).addClass('active')
                }
                if (currentStatus >= 40) {

                    if ($(this).find('div').hasClass("allowed")) {
                        $(this).find('div').removeClass('allowed')
                        $(this).find('div').addClass('not-allowed')
                    }

                    // if (currentStatus >= 60) {
                    // MO created - No touching the lines
                    disableEditingLines();
                    // }
                }
            });


            $('.order-tracking li .allowed').click(function () {
                var current_status_node = $(this);
                const path = window.location.pathname;
                const segments = path.split('/');
                const document_id = segments[segments.length - 1];
                var new_status = $(this).data('status');
                $.ajax({
                    url: '@Url.Action("UpdateStatus", "SalesDocument")',
                    type: 'POST',
                    data: {
                        documentId: document_id,
                        status: new_status
                    },
                    success: function (response) {
                        if (response.success) {
                            showToast('success', JSON.parse(response.data).message);
                            $(".order-tracking li").each(function (index, obj) {
                                var status = parseInt($(this).find('div').data('status'))
                                if (status <= new_status) {
                                    $(this).addClass('active')

                                    if (new_status >= 40) {
                                        $(this).find('div').removeClass('allowed')
                                        $(this).find('div').addClass('not-allowed')

                                        disableEditingLines();
                                    }
                                }
                                else {
                                    $(this).removeClass('active')
                                }
                            });
                        }
                        else {
                            showToast('error', response.error);
                        }
                    },
                    error: function (xhr, status, error) {
                        console.error('An error occurred: ' + error);
                    }
                });
            })
            $(function () {
                $('[data-toggle="tooltip"]').tooltip();
            });

            $('#excel_file').change(function () {
                var formData = new FormData();
                var fileInput = $('#excel_file')[0];

                var rowCount = $("#lines-table tbody tr").not('.no-records-found').length;

                if (fileInput.files.length > 0) {
                    formData.append('file', fileInput.files[0]);

                    formData.append('rowCount', rowCount);

                    $.ajax({
                        url: '@Url.Action("UploadExcel", "SalesDocument")',
                        type: 'POST',
                        data: formData,
                        contentType: false,
                        processData: false,
                        success: function (response) {
                            var linesTable = $('#lines-table');
                            var existingRows = linesTable.find('tbody tr');

                            if (existingRows.length === 1 && existingRows.hasClass('no-records-found')) {
                                $('#table-lines-container').html(response);
                            } else {
                                var responseRows = $(response).find('tbody tr');
                                linesTable.find('tbody').append(responseRows);
                            }

                            var selectedCustomerId = $("#customer-select").val();

                            updateAddressDropdowns(selectedCustomerId);

                            $('#excel_file').val('');
                        },
                        error: function (xhr, status, error) {
                            console.error('An error occurred: ' + error);
                        }
                    }).done(function () {
                        $('#table-lines-container').find('table').bootstrapTable();
                    });
                } else {
                    console.log('No file selected.');
                }
            });

            $('#import_file').click(function () {
                $('#excel_file').click();
            });

            $('#excel_file').change(function () {
                var fileName = this.files[0]?.name || "No file selected";
                $('#file_name').text(fileName);
            });

            function updateDivision(selectedCustomerId) {
                var selectedDivision = "";
                $('#division-select option').each(function () {
                    var customerId = $(this).data('customer-id');
                    if (customerId == selectedCustomerId) {
                        selectedDivision = $(this).val();
                    }
                });

                $('#division-select').val(selectedDivision);
                $('#division-code-hidden').val(selectedDivision);
            }

            function updateAddressDropdowns(selectedCustomerId) {
                $.ajax({
                    url: '@Url.Action("GetAddresses", "SalesDocument")',
                    type: 'GET',
                    data: { customerId: selectedCustomerId },
                    success: function (data) {
                        $(".invoice-to-address, .ship-to-address").empty();

                        var invoiceToAddresses = data.invoiceToAddresses;
                        $.each(invoiceToAddresses, function (index, address) {
                            $(".invoice-to-address").append($("<option></option>").val(address.value).text(address.text));
                        });

                        var shipToAddresses = data.shipToAddresses;
                        $.each(shipToAddresses, function (index, address) {
                            $(".ship-to-address").append($("<option></option>").val(address.value).text(address.text));
                        });
                    },
                    error: function (xhr, status, error) {
                        console.error("Error fetching addresses: " + error);
                    }
                });
            }

            $("#customer-select").change(function () {
                var selectedCustomerId = $(this).val();
                $('#customer-id-hidden').val(selectedCustomerId);
                updateDivision(selectedCustomerId);
                updateAddressDropdowns(selectedCustomerId);
            });

            function updateExchangeRate() {
                var selectedCurrency = $("#header-currency").val();
                $.ajax({
                    url: '@Url.Action("GetExchangeRate", "SalesDocument")',
                    type: 'GET',
                    data: { currencyCode: selectedCurrency },
                    success: function (data) {
                        if (data.exchangeRate !== undefined) {
                            $("#exchange-rate").val(parseFloat(data.exchangeRate).toFixed(2));
                        } else {
                            console.error("Exchange rate not found in response");
                        }
                    },
                    error: function (xhr, status, error) {
                        console.error("Failed to fetch exchange rate", error);
                    }
                });
            }
            $("#header-currency").change(function () {
                updateExchangeRate();
            });

            // Add new line dynamically
            $("#add_line").click(function () {
                var index = $("#lines-table tbody tr").length;
                var customerId = $('#customer-select').val();
                $.ajax({
                    url: '@Url.Action("RenderNewSalesDocumentLinesTableRow", "SalesDocument")',
                    type: 'POST',
                    data: { index: index, customerId: customerId },
                    success: function (data) {
                        // var newRow = data;

                        // $('#lines-table').bootstrapTable('append', newRow);
                        // alert(data)

                        // $('#lines-table').bootstrapTable('showColumn', 'sales_document_line_id');

                        $("#lines-table tbody tr.no-records-found").remove();
                        $('#lines-table tbody').append(data);

                        $('#lines-table').bootstrapTable('refresh');

                        var selectedCurrency = $('#header-currency').val();
                        $("#lines-table tbody tr:last-child select[name='SalesDocumentLines[" + index + "].Currency']").val(selectedCurrency);
                        $("#lines-table tbody tr:last-child select[name='SalesDocumentLines[" + index + "].UOM']").val('pc');
                        $('.remove').click(function () {
                            $(this).closest("tr").remove();
                        });
                    },
                    error: function (xhr, status, error) {
                        console.error("Failed to fetch exchange rate", error);
                    }
                });
            });
        });
        window.operateEvents = {
            'click .remove': function (e, value, row, index) {
                sales_document_line_id = row.sales_document_line_id

                if (sales_document_line_id != 0) {
                    $('#popupModalLabel').text('Confirm Deletion');
                    $('#modalBody').html('<span id="modalIcon" class="me-2"><i class="bi bi-exclamation-triangle-fill text-danger large-icon"></i></span> Are you sure you want to Cancel this item?');

                    $('#popupModal').modal('show');
                    $('#okButton').off('click').on('click', function () {

                        DeleteSaleDoccumentLine(sales_document_line_id)

                        $('#popupModal').modal('hide');
                    });
                }
                else {
                    const linesData = $('#lines-table').bootstrapTable('getData');
                    const rowIndex = linesData[index].row_index;

                    $('#lines-table').bootstrapTable('remove', {
                        field: 'row_index',
                        values: [rowIndex]
                    });
                }
            }
        }
        function DeleteSaleDoccumentLine(id) {
            $('#lines-table').bootstrapTable('showLoading')
            $.ajax({
                url: '@Url.Action("DeleteSaleDocumentLine", "Home")',
                type: 'POST',
                data: {
                    id: id
                },
                success: function (result) {
                    // console.log(result)
                    // console.log(JSON.parse(result.data))
                    if (result.success) {
                        showToast('success', JSON.parse(result.data).message);
                        $('#lines-table').bootstrapTable('remove', {
                            field: 'sales_document_line_id',
                            values: [id]
                        });
                    } else {
                        showToast('error', result.error);
                    }

                    $('#popupModal').modal('hide');
                },
                error: function (xhr, status, error) {
                    console.log("xhr : " + xhr)
                    console.log("status : " + status)
                    console.log("error : " + error)
                    alert("Error: " + error);
                }
            }).done(function (result) {
                $('#lines-table').bootstrapTable('hideLoading')
            });
        }
    </script>
}