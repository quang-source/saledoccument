@model SalesContractApplication.Models.WIPReportViewModel

@{
    ViewBag.Title = "WIP Report";
}

@section Styles {
    <style>
       table {
            width: 100%;
            border-collapse: collapse;
        }
        
        th, td {
         /*    border: 1px solid red!important; */
                    /* padding: 8px; */
            text-align: center;
            font-size: 12px;
            vertical-align: middle;
        }
        thead  {
            position: sticky; /* Makes the header sticky */
            top: -8px; /* Sticks to the top of the container */
            z-index: 997; /* Ensures it stays above other rows */
            background-color: cadetblue !important;
        }
        tbody td:nth-child(1), tbody td:nth-child(2), tbody td:nth-child(3), tbody td:nth-child(4), tbody td:nth-child(5), tbody td:nth-child(6) {
            position: sticky;
            background-color:white;
            z-index: 996;
        }
        thead tr:nth-child(1) th:nth-child(1), thead tr:nth-child(1) th:nth-child(2), thead tr:nth-child(1) th:nth-child(3),
        thead tr:nth-child(1) th:nth-child(4), thead tr:nth-child(1) th:nth-child(5), thead tr:nth-child(1) th:nth-child(6) {
            position: sticky;
            z-index: 998;
            background-color: cadetblue !important;
        }

        .select2-container--bootstrap-5 .select2-selection--single {
  background-size: 7px 7px;
  padding:.375rem 3px;
  text-align:left;
      font-size: 12px;
}
/*
        tbody td:nth-child(1), thead tr:nth-child(1) th:nth-child(1) {
            left: 0px;
        }

        tbody td:nth-child(2), thead tr:nth-child(1) th:nth-child(2) {
            left: 67px;
        }

        tbody td:nth-child(3), thead tr:nth-child(1) th:nth-child(3) {
            left: 223px;
        }

        tbody td:nth-child(4), thead tr:nth-child(1) th:nth-child(4) {
            left: 290px;
        }

        tbody td:nth-child(5), thead tr:nth-child(1) th:nth-child(5) {
            left: 459px;
        }

        tbody td:nth-child(6), thead tr:nth-child(1) th:nth-child(6) {
            left: 536px;
        } 
*/
        .toggle-icon {
            cursor: pointer;
            display: inline-block;
            font-weight: bold;
            padding: 2px 6px;
            margin-right: 5px;
            background-color: #007bff;
            color: white;
            border-radius: 4px;
            font-size: 12px;
        }
        .highlight {
            background-color: yellow;
        }

    </style>
}
<div class="container-fluid">
    <div style="height:90vh; overflow-y:auto">
        <input type="text" id="searchBox" placeholder="Type to search..." />
        <table id="myTable" class="table table-bordered" >
            <thead>
                <tr>
                    <th rowspan="2" class="frezze-column">
                        <span>
                             Group
                            <select class="filter form-select" data-column="0"  data-filter="customer_group">
                                <option value="ALL">All</option>
                            </select>
                        </span>
                    </th>
                    <th rowspan="2" class="frezze-column">
                        Customer
                        <select class="filter form-select" data-column="1"data-filter="customer_code">
                            <option value="ALL">All</option>
                        </select>
                    </th>
                    <th rowspan="2">
                        Order Type
                        <select class="filter form-select" data-column="2"data-filter="order_type">
                            <option value="ALL">All</option>
                        </select>
                    </th>
                    <th rowspan="2">
                        Cust Order
                        <select class="filter form-select" data-column="3"data-filter="customer_order_number">
                            <option value="ALL">All</option>
                        </select>
                    </th>
                    <th rowspan="2">
                        Order ID
                        <select class="filter form-select" data-column="4"data-filter="order_id">
                            <option value="ALL">All</option>
                        </select>
                    </th>
                    <th rowspan="2">
                        LOP
                        <select class="filter form-select" data-column="5"data-filter="lop">
                            <option value="ALL">All</option>
                        </select>
                    </th>
                    <th colspan="15">Production Steps</th>
                    <th rowspan="2"> Total</th>
                </tr>
                <tr>
                    <th >Packing</th>
                    <th>Non <br>Moving</th>
                    <th>Repairing</th>
                    <th>Finishing</th>
                    <th>Pre <br>Finishing</th>
                    <th>Setting</th>
                    <th>Missing<br> Component</th>
                    <th>Stones</th>
                    <th>Post<br> Preparation</th>
                    <th>Preparation</th>
                    <th>Casting</th>
                    <th>Wax</th>
                    <th>Wax<br> Setting</th>
                    <th>Planning</th>
                    <th>Others</th>
                </tr>
            </thead>
            <tbody>
            </tbody>
        </table>
    </div>
</div>
@section Scripts {
    <script type="text/javascript">
        let arr = new Array();
        function checkText(text){
             return text == null ? '' : text;
        }
        function filterByKeyValue(array, key, value) {
            return array.filter(item => item[key].trim() === value.trim());
        }
        function drawTable (arrayData)
        {
            
             const $tbody = $('#myTable tbody');
              $('#myTable tbody tr').remove()
                        arrayData.forEach(row => {
                        const $tr = $('<tr></tr>'); 
                        $tr.append(`<td>${checkText(row.customer_group)}</td>`);
                        $tr.append(`<td>${checkText(row.customer_code)}</td>`);
                        $tr.append(`<td>${checkText(row.order_type)}</td>`);
                        $tr.append(`<td>${checkText(row.customer_order_number)}</td>`);
                        $tr.append(`<td>${checkText(row.order_id).trim()}</td>`);
                        $tr.append(`<td>${checkText(row.lop)}</td>`);
                        $tr.append(`<td><a href="javascript:void(0)">${checkText(row.packing)}</a></td>`);
                        $tr.append(`<td><a href="javascript:void(0)">${checkText(row.non_moving)}</a></td>`);
                        $tr.append(`<td><a href="javascript:void(0)">${checkText(row.repairing)}</a></td>`);
                        $tr.append(`<td><a href="javascript:void(0)">${checkText(row.finishing)}</a></td>`);
                        $tr.append(`<td><a href="javascript:void(0)">${checkText(row.pre_finishing)}</a></td>`);
                        $tr.append(`<td><a href="javascript:void(0)">${checkText(row.setting)}</a></td>`);
                        $tr.append(`<td><a href="javascript:void(0)">${checkText(row.missing_component)}</a></td>`);
                        $tr.append(`<td><a href="javascript:void(0)">${checkText(row.stones)}</a></td>`);
                        $tr.append(`<td><a href="javascript:void(0)">${checkText(row.post_preparation)}</a></td>`);
                        $tr.append(`<td><a href="javascript:void(0)">${checkText(row.preparation)}</a></td>`);
                        $tr.append(`<td><a href="javascript:void(0)">${checkText(row.casting)}</a></td>`);
                        $tr.append(`<td><a href="javascript:void(0)">${checkText(row.wax)}</a></td>`);
                        $tr.append(`<td><a href="javascript:void(0)">${checkText(row.wax_setting)}</a></td>`);
                        $tr.append(`<td><a href="javascript:void(0)">${checkText(row.planning)}</a></td>`);
                        $tr.append(`<td><a href="javascript:void(0)">${checkText(row.others)}</a></td>`);
                        $tr.append(`<td>${checkText(row.total)}</td>`);
                            $tbody.append($tr); 
                        });

            mergeTableCells("#myTable tbody", 4);
        }
        function getData(){
           
            $.ajax({
                url: '@Url.Action("GetWipReport", "WIPReport")',
                type: 'GET',
                   async: false,
                success: function (result) {
                    if (result.success) {
                      arr = JSON.parse(result.data);
                      console.log(arr.length)
                      drawTable(arr);
                      populateFilters() ;
                      
                    } else {
                     showToast('error', 'Can Not find Wip Report data : ' + data.Error );

                    }  
                  
                },
                error: function (xhr, status, error) {
                    console.log("xhr : " + xhr)
                    console.log("status : " + status)
                    console.log("error : " + error)
                    alert("Error: " + error);
                }
            }).done(function (result) {
                 
                // $detail_table.bootstrapTable('hideLoading')
            });
        }

        function populateFilters() {
            $("#myTable thead th").each(function (index) {
                let select = $(this).find("select.filter");
                $($(this).find("select.filter option")).each(function (i,k) {
                    console.log('remove');
                    $(k).remove();
                });
                let uniqueValues = new Set();

                $("#myTable tbody tr:visible").each(function () {
                    let cellValue = $(this).find("td").eq(index).clone().find('span').remove().end().text();
                    uniqueValues.add(cellValue);
                });
                select.append(' <option value="">All</option>');
                uniqueValues.forEach(function (value) {
                    select.append('<option value="' + value + '">' + value + '</option>');
                });
            });
        }
  function highlightAndFocus(term) {
                // Clear previous highlights
                $('#myTable td').each(function () {
                    $(this).removeClass('highlight').html($(this).text());
                });

                if (!term.trim()) return;

                let lastMatch = null;

                // Highlight matches and track the last one
                $('#myTable td').each(function () {
                    const content = $(this).text();
                    const regex = new RegExp(`(${term})`, 'gi');
                    if (regex.test(content)) {
                        const highlighted = content.replace(regex, '<span class="highlight">$1</span>');
                        $(this).html(highlighted);
                        lastMatch = $(this);
                    }
                });

                // Focus on the last matched cell, if any
                if (lastMatch) {
                    const cell = lastMatch[0];
                    const span = cell.querySelector('.highlight');
                    if (span) {
                        // Scroll the cell into view
                        cell.scrollIntoView({ behavior: 'smooth', block: 'center' });

                        // Move cursor to the end of the last match
                        const range = document.createRange();
                        const selection = window.getSelection();
                        range.selectNodeContents(span);
                        range.collapse(false); // Move to the end
                        selection.removeAllRanges();
                        selection.addRange(range);
                    }
                }
            }

         

            
            function mergeTableCells(selector, lastColumnIndex) {
                let rows = $(selector).find("tr");

                for (let columnIndex = 0; columnIndex <= lastColumnIndex; columnIndex++) {
                    let firstCell = null;
                    let rowspan = 1;

                    rows.each(function (i, row) {
                        let currentCell = $(row).find("td").eq(columnIndex);
                        currentCell.data("col", columnIndex);

                        let nameAttr = 'col';
                        for (let i = 0; i <= columnIndex; i++) {
                            let text = $(row).find("td").eq(i).clone().find('span').remove().end().text().trim();
                            nameAttr += `_${text}`;
                        }
                        currentCell.attr("name", nameAttr);
                        let isSameGroup = true;
                        for (let prevColumnIndex = 0; prevColumnIndex < columnIndex; prevColumnIndex++) {
                            let prevCell = $(row).find("td").eq(prevColumnIndex);
                            let prevFirstCell = $(firstCell).closest("tr").find("td").eq(prevColumnIndex);
                            if (prevCell.attr("name") !== prevFirstCell.attr("name")) {
                                isSameGroup = false;
                                break;
                            }
                        }

                        if (firstCell && currentCell.text().trim() === firstCell.text().trim() && isSameGroup) {
                            rowspan++;
                            firstCell.attr("rowspan", rowspan);
                            currentCell.hide();
                        } else {
                            if (firstCell && rowspan > 1) {
                                firstCell.html('<span class="toggle-icon">-</span>' + firstCell.html());
                            }
                            rowspan = 1;
                            firstCell = currentCell;
                        }

                        firstCell.attr("data-origin-rowspan", rowspan);
                    });

                    // After the loop, check the last cell in case it also had rowspan > 1
                    if (firstCell && rowspan > 1) {
                        firstCell.html('<span class="toggle-icon">-</span>' + firstCell.html());
                    }
                }
            }
        $(document).ready(function () {
            getData();  
            $(".filter").select2({
                    theme: "bootstrap-5",
            });
            $('#searchBox').keypress(function (e) {
                    e.preventDefault();
                    const searchTerm = $('#searchBox').val();
                    highlightAndFocus(searchTerm);
            });
            $("#myTable").on("change", "select.filter", function () {
               let columnIndex = $(this).data("column");
               let selectedValue = $(this).val(); 
               let filteredArray = arr;
                $("#myTable thead th select.filter").each(function (v, k) 
                {
                      var columnToFilter =  $(k).data("filter");
                      var valueToFilter = $(k).val();
                      if(valueToFilter != 'ALL' && valueToFilter != ''){
                            filteredArray =    filterByKeyValue(filteredArray, columnToFilter, valueToFilter);
                      }
                });
                drawTable(filteredArray);
                const oldval = $(this).val();
                populateFilters();
                $(this).val(oldval);
            });
            $("#myTable").on("click", ".toggle-icon", function () {
                let icon = $(this);
                let cell = icon.closest("td");
                let currentRow = cell.closest("tr");
                const cellName = cell.attr("name");
                const cellColIdx = cell.data("col");

                // Toggle between showing/hiding the rows and change icon
                if (icon.text() === "-") {
                    icon.text("+");
                    let rowspan = parseInt(cell.attr("rowspan"));

                    // Hide the rows under the current merged cell
                    let nextAll = currentRow.nextAll(":visible");
                    for (let i = 1; i < rowspan; i++) {
                        nextAll.eq(i - 1).hide();
                    }
                    cell.attr("rowspan", 1);
                    let hiddenRowCount = rowspan - 1;

                    // applied logic for all col after (0: CustGroup): reducing prev columns' rowspan
                    if (cellColIdx > 0) {
                        for (let i = cellColIdx; i > 0; i--) {
                            let prevCol = currentRow.find("td").eq(i - 1);

                            let td = $(`[name="${prevCol.attr("name")}"]:visible`).first();

                            let currentRowspan = parseInt(td.attr("rowspan"));
                            td.attr("rowspan", currentRowspan - hiddenRowCount);
                        }
                    }

                    // applied logic for all col before (4: OrderID): hide related cells after current cell (only td under 0, 1, 2, 3, 4 column)
                    if (cellColIdx < 4) {
                        let colspan = 1;
                        const children = $(`[name*="${cellName}"]:not([name="${cellName}"])`);

                        children.each(function (i, child) {
                            $(child).hide();
                        });

                        cell.attr("colspan", 4 - cellColIdx + 1);
                    }

                    // sum all qty columns, 6 and 50 are hardcode
                    for (let i = 6; i <= 50; i++) {
                        let qty = parseInt(currentRow.find("td").eq(i).text()) || 0;

                        let nextAll = currentRow.nextAll();
                        for (let j = 1; j < rowspan; j++) {
                            let nextQty = parseInt(nextAll.eq(j - 1).find("td").eq(i).text()) || 0;
                            qty += nextQty;
                        }

                        if (qty > 0) {
                            currentRow.find("td").eq(i).html('<a href="javascript:void(0)">'+qty+'</a>');
                        }
                        else {
                            currentRow.find("td").eq(i).text('');
                        }
                    }

                } else {
                    icon.text("-");
                    let rowspan = parseInt(cell.attr("data-origin-rowspan"));
                    let hiddenRowCount = rowspan - 1;

                    // applied logic for all col before (4: OrderID): show related cells after current cell (only td under 0, 1, 2, 3, 4 column)
                    if (cellColIdx <= 4) {
                        const children = $(`td[name*="${cellName}"]:not([name="${cellName}"])[data-origin-rowspan]`);

                        let ignoredNames = []

                        children.each(function (i, child) {
                            let childIconText = $(child).find('span.toggle-icon').text();
                            if (childIconText === '+') {
                                ignoredNames.push($(child).attr("name"));

                                hiddenRowCount -= (parseInt($(child).attr("data-origin-rowspan")) - 1);
                            }
                        });

                        children.each(function (i, child) {
                            let childName = $(child).attr("name");

                            // Check if the childName does not contain any name in ignoredNames
                            let isIgnored = ignoredNames.some(ignoredName => childName.includes(ignoredName) && childName != ignoredName);

                            if (!isIgnored) {
                                $(child).show(); // Show the child if it's not ignored
                            }
                        });

                        cell.attr("rowspan", hiddenRowCount + 1);
                        cell.attr("colspan", 1);
                    }

                    // Show the rows under the current merged cell
                    let nextAll = currentRow.nextAll(":hidden");
                    for (let i = 1; i < hiddenRowCount + 1; i++) {
                        nextAll.eq(i - 1).show();
                    }

                    // applied logic for all col after (0: CustGroup): increasing prev columns' rowspan
                    if (cellColIdx > 0) {
                        for (let i = cellColIdx; i > 0; i--) {
                            let prevCol = currentRow.find("td").eq(i - 1);

                            let td = $(`[name="${prevCol.attr("name")}"]:visible`).first();

                            let currentRowspan = parseInt(td.attr("rowspan"));
                            td.attr("rowspan", currentRowspan + hiddenRowCount);
                        }
                    }

                    // de-sum all qty columns  (6 -> 19)
                    for (let i = 6; i <= 18; i++) {
                        let qty = parseInt(currentRow.find("td").eq(i).text()) || 0;

                        let nextAll = currentRow.nextAll(":visible");
                        for (let j = 1; j < rowspan; j++) {
                            let prevQty = parseInt(nextAll.eq(j - 1).find("td").eq(i).text()) || 0;
                            qty -= prevQty;
                        }

                        if (qty > 0) {
                            currentRow.find("td").eq(i).html('<a href="javascript:void(0)">'+qty+'</a>');
                        }
                        else {
                            currentRow.find("td").eq(i).text('');
                        }
                    }
                }

            });

        });
    </script>
}